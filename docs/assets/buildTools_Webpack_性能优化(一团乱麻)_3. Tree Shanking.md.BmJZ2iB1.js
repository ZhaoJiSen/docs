import{_ as s,c as i,o as a,a3 as n}from"./chunks/framework.2CELp8iJ.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"buildTools/Webpack/性能优化(一团乱麻)/3. Tree Shanking.md","filePath":"buildTools/Webpack/性能优化(一团乱麻)/3. Tree Shanking.md","lastUpdated":null}'),e={name:"buildTools/Webpack/性能优化(一团乱麻)/3. Tree Shanking.md"},t=n(`<p><a name="K6gjO"></a></p><h2 id="tree-shaking" tabindex="-1">Tree-Shaking <a class="header-anchor" href="#tree-shaking" aria-label="Permalink to &quot;Tree-Shaking&quot;">​</a></h2><p>Tree-Shaking 是一种在 JavaScript 程序中用于消除未使用代码的技术，在 Webpack 中使用 Tree-Shaking 可以帮助减少最终打包文件的大小。Webpack 的 Tree-Shaking 主要依赖：</p><ol><li>usedExports：usedExports 依赖于 ES6 的 import 与 export 语法，Tree-Shaking 可以识别出那些没有被 import 的导出，最终将其移除</li><li>Side-effects flags：Webpack 允许模块标记为具有副作用（side-effects）或无副作用</li><li>Scope Hoisting：Webpack5 引入了 Scope Hoisting，它可以提升模块的局部变量，减少闭包的创建，从而优化打包后的代码结构。该功能 Tree-Shaking 配合使用可以更有效的移除未使用代码</li><li>Minimizer Plugins：通过配置 minimizer 也会参与 Tree-Shaking 过程 <a name="tmz7f"></a></li></ol><h3 id="usedexports" tabindex="-1">usedExports <a class="header-anchor" href="#usedexports" aria-label="Permalink to &quot;usedExports&quot;">​</a></h3><p>usedExports 是 optimization 配置的一部分，生产环境下自 e 动开启，当<code>optimization.usedExports</code>为 true 时，Webpack 会进行 &quot;出口导出优化&quot;，将会尝试移除模块中未被使用的导出</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	optimization: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		usedExports: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		splitChunks: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		minimize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		minimizer: [],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>未被使用的导出在最终打包出的代码中依然存在，但会被注释标记<code>/* unused harmony export xxx */</code>，最#终在 Terser 处理时被删除 <a name="Y1cJG"></a></p><h3 id="sideeffects" tabindex="-1">SideEffects <a class="header-anchor" href="#sideeffects" aria-label="Permalink to &quot;SideEffects&quot;">​</a></h3><p>sideEffects 用于告知 Webpack 编译器哪些模块具有副作用，不能仅仅通过 export 来判断代码的意义，具有副作用的会被认为是 &quot;入口点&quot;，Webpack 会将整个模块打包在文件中，而不仅包含被引用的部分，无副作用的则可以被 Tree-Shaking，该配置项在 package.json 中配置</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	&quot;sideEffects&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>将 sideEffects 设置为 false，将使得 Webpack 在处理导入模块时，将所有模块都认为是没有副作用的，该模块都会被 Tree-Shaking 移除。因为即使开启了 usedExports 配置 Webpack 也是不会删除掉整个模块的引入的，配置 sideEffects 就是将这个模块都删掉</p><p>可以给 sideEffects 传入一个数组来使得 Webpack 在处理时保留副作用模块 <a name="aB7qO"></a></p><h3 id="scope-hoisting" tabindex="-1">Scope Hoisting <a class="header-anchor" href="#scope-hoisting" aria-label="Permalink to &quot;Scope Hoisting&quot;">​</a></h3><p>Scope Hoisting 就是作用域提升，该特性从 Webpack 5 中新增，功能是提升模块的局部变量，减少闭包的创建，从而优化打包后的代码结构。该功能 Tree-Shaking 配合使用可以更有效的移除未使用代码</p><p>默认情况下打包后的文件会包含许多函数作用域，不论是从最开始的代码运行 ，还是加载模块，都需要执行一些列函数，Scope Hoisting 可以将函数合并到一个模块中运行。通过</p><p><a name="RilMi"></a></p><h3 id="css-文件的-tree-shaking" tabindex="-1">CSS 文件的 Tree-Shaking <a class="header-anchor" href="#css-文件的-tree-shaking" aria-label="Permalink to &quot;CSS 文件的 Tree-Shaking&quot;">​</a></h3><p>通常在引入 CSS 样式文件时都会通过<code>import &#39;path&#39;</code>的方式进行引入，这种导入方式由于没有使用任何变量接收，因此在开启 sideEffects 后，这种引入方式将会被认为没有副作用，进而被 Tree-Shaking 删除，所以在配置 sideEffects 时需要对 CSS 额外配置</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	&quot;sideEffects&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*.css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通过<code>*.css</code>就会表示所有的 CSS 文件都是存在副作用的</p><p>当样式中的选择器（类选择器，id 选择器）没有与之匹配的标签，默认也是会被打包，那么就会造成 CSS 代码的冗余，因此 CSS 也需进行 Tree-Shaking。在 Webpack 中需要安装额外的插件来处理 CSS 的 Tree-Shaking</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> purgecss-webpack-plugin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PurgeCSSPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;purgecss-webpack-plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PATHS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	src: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../src&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	plugins: [</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PurgeCSSPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// 需要做 Tree-Shaking 的文件目录,nodir 表示查找文件而不是文件夹</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			paths: glob.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PATHS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">src</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}/**/*\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { nodir: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div>`,24),p=[t];function h(l,k,r,d,E,c){return a(),i("div",null,p)}const y=s(e,[["render",h]]);export{g as __pageData,y as default};
