import{_ as s,c as a,o as i,a3 as n}from"./chunks/framework.2CELp8iJ.js";const b=JSON.parse('{"title":"Webpack","description":"","frontmatter":{},"headers":[],"relativePath":"buildTools/Webpack/index.md","filePath":"buildTools/Webpack/index.md","lastUpdated":1718777675000}'),e={name:"buildTools/Webpack/index.md"},l=n(`<h1 id="webpack" tabindex="-1">Webpack <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;Webpack&quot;">​</a></h1><p>Webpack 是一个用于构建 JavaScript 应用程序的静态模块打包工具，其能够以一种<strong>相对一致</strong>的开放处理方式去解析、应用所有资源文件，最终将其打包为浏览器兼容的 Web 资源文件。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>在 Webpack 中任何的资源，包括图片、CSS、视频、代码等都被统一看做为<code>Module</code>对象，以相同的加载、解析、优化、合并流程从而实现打包</p></div><h2 id="使用-babel" tabindex="-1">使用 Babel <a class="header-anchor" href="#使用-babel" aria-label="Permalink to &quot;使用 Babel&quot;">​</a></h2><p>Bable 是一个 JavaScript 转换编译器，它能将高版本 —— 如 ES6 代码等价转译为向后兼容，能直接在旧版 JavaScript 引擎运行的低版本代码，例如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 Babel 转译前</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 转译后</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><details class="details custom-block"><summary>内容补充：为什么需要 Babel</summary><p>由于 ES6 版本补充了大量提升 JavaScript 开发效率的新特性，使得 JavaScript 可以真正被用于编写复杂的大型应用程序。但也同时也或多或少的存在一些兼容性问题，为此现代 Web 开发流程中通常会引入 Babel 等转译工具。</p></details><h3 id="安装依赖" tabindex="-1">安装依赖 <a class="header-anchor" href="#安装依赖" aria-label="Permalink to &quot;安装依赖&quot;">​</a></h3><p>在 Webpack 场景下，只需使用<code>babel-loader</code>即可接入 Babel 的转义功能</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @babel/core</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @babel/preset-env</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> babel-loader</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">其中：</p><ul><li><code>@babel/core</code>：Babel 的核心库，负责实际的代码转换工作</li><li><code>babel-loader</code>：是一个 Webpack 加载器，用于在 Webpack 构建过程中调用 Babel 来转换代码</li><li><code>@babel/preset-env</code>：是一种 Babel 预设规则集，能够能按需将一系列复杂、数量庞大的配置、插件、Polyfill 等打包成一个单一的资源包，从而简化 Babel 的应用、学习成本</li></ul></div><h3 id="添加模块处理规则" tabindex="-1">添加模块处理规则 <a class="header-anchor" href="#添加模块处理规则" aria-label="Permalink to &quot;添加模块处理规则&quot;">​</a></h3><p>在 Webpack 配置文件中，通过<code>module</code>属性来声明模块处理规则，<code>module.rules</code>子属性用于对文件类型与 Loader 的匹配</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modules: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        rules: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                use: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;babel-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">小差一嘴：</p><p>通过上面的内容，就不难理解为什么在 Webpack 中使用这些配置项名称。就是因为 Webpack 将所有资源都视为模块（Module），因此使用 module 配置项来匹配不同类型的资源（例如上面的 test 配置项），以及通过 use 和 options 配置项，就可以指定如何解析和转换这些资源。</p></div><h3 id="执行编译" tabindex="-1">执行编译 <a class="header-anchor" href="#执行编译" aria-label="Permalink to &quot;执行编译&quot;">​</a></h3><p>在执行编译前，还需配置 Babel 的预设规则集，其作用就是告诉 Babel 如何对如何代码进行转换</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>module.exports = {</span></span>
<span class="line"><span>    modules: {</span></span>
<span class="line"><span>        rules: [</span></span>
<span class="line"><span>            {</span></span>
<span class="line"><span>                test: /\\.js$/,</span></span>
<span class="line"><span>                use: [</span></span>
<span class="line"><span>                    {</span></span>
<span class="line"><span>                        loader: &#39;babel-loader&#39;,</span></span>
<span class="line"><span>                        options: {</span></span>
<span class="line"><span>                            presets: [&#39;@babel/preset-env&#39;]</span></span>
<span class="line"><span>                        }</span></span>
<span class="line"><span>                    }</span></span>
<span class="line"><span>                ]</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        ]</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>然后就可以执行 Webpack CLI 所提供的命令，进行编译转换</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> webpack</span></span></code></pre></div><h2 id="使用-typescript" tabindex="-1">使用 TypeScript <a class="header-anchor" href="#使用-typescript" aria-label="Permalink to &quot;使用 TypeScript&quot;">​</a></h2><h2 id="使用-eslint" tabindex="-1">使用 ESLint <a class="header-anchor" href="#使用-eslint" aria-label="Permalink to &quot;使用 ESLint&quot;">​</a></h2>`,22),p=[l];function t(h,k,d,c,r,o){return i(),a("div",null,p)}const g=s(e,[["render",t]]);export{b as __pageData,g as default};
